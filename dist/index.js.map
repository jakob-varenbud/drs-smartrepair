{
  "version": 3,
  "sources": ["../bin/live-reload.js", "../src/utils/datePicker.ts", "../src/utils/formDuplicator.ts", "../src/utils/zapier.ts", "../src/index.ts"],
  "sourcesContent": ["new EventSource(`${SERVE_ORIGIN}/esbuild`).addEventListener('change', () => location.reload());\n", "export const datePicker = () => {\n  $(document).ready(function () {\n    $.datepicker.regional['de'] = {\n      closeText: 'Schlie\u00DFen',\n      prevText: '&#x3C;Zur\u00FCck',\n      nextText: 'Vor&#x3E;',\n      currentText: 'Heute',\n      monthNames: [\n        'Januar',\n        'Februar',\n        'M\u00E4rz',\n        'April',\n        'Mai',\n        'Juni',\n        'Juli',\n        'August',\n        'September',\n        'Oktober',\n        'November',\n        'Dezember',\n      ],\n      monthNamesShort: [\n        'Jan',\n        'Feb',\n        'M\u00E4r',\n        'Apr',\n        'Mai',\n        'Jun',\n        'Jul',\n        'Aug',\n        'Sep',\n        'Okt',\n        'Nov',\n        'Dez',\n      ],\n      dayNames: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag'],\n      dayNamesShort: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],\n      dayNamesMin: ['So', 'Mo', 'Di', 'Mi', 'Do', 'Fr', 'Sa'],\n      weekHeader: 'KW',\n      dateFormat: 'dd.mm.yy',\n      firstDay: 1,\n      isRTL: false,\n      showMonthAfterYear: false,\n      yearSuffix: '',\n    };\n    $.datepicker.setDefaults($.datepicker.regional['de']);\n\n    $('#datePicker').datepicker({\n      minDate: 14,\n      dateFormat: 'dd-mm-yy',\n    });\n  });\n};\n", "// Exportiert eine Funktion als ES6-Modul, die f\u00FCr die Verdopplung von Formularelementen verantwortlich ist\nexport const formDuplicator = () => {\n  let cloneCount = 0; // Z\u00E4hlvariable f\u00FCr die Anzahl der durchgef\u00FChrten Klonvorg\u00E4nge\n\n  // F\u00FCgt einen Event-Listener hinzu, der auf das vollst\u00E4ndige Laden des DOM wartet\n  document.addEventListener('DOMContentLoaded', () => {\n    // Sucht den Button durch seine ID\n    const verdoppelnBtn = document.getElementById('verdoppelnButton');\n    // F\u00FCgt dem Button einen Click-Event-Listener hinzu, der die Funktion 'verdoppeln' ausf\u00FChrt\n    verdoppelnBtn.addEventListener('click', verdoppeln);\n  });\n\n  // Die Funktion 'verdoppeln' wird aufgerufen, wenn der Benutzer auf den Button klickt\n  function verdoppeln() {\n    cloneCount++; // Erh\u00F6ht die Klonz\u00E4hlvariable um eins\n\n    // Referenziert das Original-Formularcontainer-Element durch seine ID\n    const formContainer = document.getElementById('formContainer');\n    // F\u00FCgt das Originalformular zur Klasse 'form-clone' hinzu, falls noch nicht geschehen\n    formContainer.classList.add('form-clone');\n\n    // Erstellt eine Kopie (Klon) des Formularcontainers\n    const clone = formContainer.cloneNode(true);\n\n    // Eindeutiges Suffix generieren, das auf den aktuellen Zeitpunkt und den Klonz\u00E4hler basiert\n    const uniqueSuffix = Date.now() + '-' + cloneCount;\n    // Durchl\u00E4uft alle geklonten Elemente mit einer ID\n    clone.querySelectorAll('[id]').forEach((element) => {\n      const originalId = element.id;\n      // Setzt neue eindeutige IDs und Namen f\u00FCr die geklonten Elemente\n      element.id = `${originalId}-${uniqueSuffix}`;\n      if (element.name) {\n        element.name = `${element.name}-${uniqueSuffix}`;\n      }\n      // Setzt den Zustand von Input-Elementen zur\u00FCck\n      if (element.tagName === 'INPUT') {\n        element.checked = false; // Setzt Radio-Buttons und Checkboxen zur\u00FCck\n        element.value = ''; // Setzt den Wert von Textfeldern zur\u00FCck\n      }\n      // Aktualisiert das 'for'-Attribut im Label, um es auf das neue Input-Element zu beziehen\n      const label = clone.querySelector(`label[for=\"${originalId}\"]`);\n      if (label) {\n        label.setAttribute('for', `${originalId}-${uniqueSuffix}`);\n      }\n    });\n\n    // Entfernt den Uploadcare-Button im Klon, sodass er nicht dupliziert erscheint\n    const clonedUploadcareButton = clone.querySelector('.uploadcare--widget');\n    if (clonedUploadcareButton) {\n      clonedUploadcareButton.remove(); // Entfernt den Button\n    }\n\n    // Bestimmt das zuletzt hinzugef\u00FCgte geklonte Element und f\u00FCgt den neuen Klon direkt danach ein\n    const lastClone = document.querySelectorAll('.form-clone').length\n      ? document.querySelectorAll('.form-clone')[\n          document.querySelectorAll('.form-clone').length - 1\n        ]\n      : formContainer;\n    lastClone.parentNode.insertBefore(clone, lastClone.nextSibling);\n  }\n};\n", "export const zapier = () => {\n  document.addEventListener('submit', function (event) {\n    // Stellen Sie sicher, dass es Ihr spezifisches Formular ist\n    if (event.target.matches('#b2bform')) {\n      event.preventDefault(); // Verhindert vor\u00FCbergehend das Absenden des Formulars\n\n      // Werte sammeln\n      const datenArray = [];\n      document\n        .querySelectorAll('.Select-Field, .is-table, .Text-Field-4')\n        .forEach(function (element) {\n          const elementData = {};\n          if (element.classList.contains('Select-Field')) {\n            elementData['select'] = element.value; // Wert des Select-Feldes\n          } else if (element.classList.contains('is-table')) {\n            elementData['isTable'] = element.value; // Wert des is-table Textfeldes\n          } else if (element.classList.contains('Text-Field-4')) {\n            elementData['textField4'] = element.value; // Wert des Text Field 4 Textfeldes\n          }\n          datenArray.push(elementData);\n        });\n\n      // Konvertiert das Array in einen JSON-String\n      const datenString = JSON.stringify(datenArray);\n\n      // Setzt den String in ein verborgenes Feld\n      document.getElementById('verborgenesFeldId').value = datenString;\n\n      event.target.submit(); // Sendet das Formular wieder\n    }\n  });\n};\n", "import { datePicker } from '$utils/datePicker.js';\nimport { formDuplicator } from '$utils/formDuplicator.ts';\nimport { zapier } from '$utils/zapier';\n\nformDuplicator();\ndatePicker();\nzapier();\n"],
  "mappings": "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",
  "names": []
}
